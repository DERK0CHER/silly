#!/usr/bin/env python3
# coding: utf-8

import os
# Force X11 backend to avoid Wayland protocol errors during development
os.environ.setdefault('GDK_BACKEND', 'x11')
import sys
import gi
import gettext
import argparse

# Add project root to PYTHONPATH
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, PROJECT_ROOT)

# GTK/Adwaita versions
gi.require_version('Gtk', '4.0')
gi.require_version('Adw', '1')
from gi.repository import Gtk, Gio, Adw, GLib

# Setzer module imports
from setzer.workspace.workspace import Workspace
import setzer.workspace.workspace_viewgtk as view
import setzer.keyboard_shortcuts.shortcuts as shortcuts
from setzer.app.service_locator import ServiceLocator
from setzer.dialogs.dialog_locator import DialogLocator
from setzer.app.color_manager import ColorManager
from setzer.app.font_manager import FontManager
from setzer.popovers.popover_manager import PopoverManager
from setzer.app.latex_db import LaTeXDB
from setzer.settings.document_settings import DocumentSettings
from setzer.helpers.timer import timer

class MainApplicationController(Adw.Application):

    def __init__(self):
        super().__init__(application_id='org.cvfosammmm.Setzer', flags=Gio.ApplicationFlags.NON_UNIQUE)
        self.is_active = False
        self.connect('activate', self.on_activate)

    def on_activate(self, app):
        self.activate_app()

    def do_activate(self):
        self.activate_app()

    def do_open(self, files, number_of_files, hint=""):
        if not self.is_active:
            self.activate_app()
        # Add your existing open logic here

    def activate_app(self):
        if self.is_active:
            return

        self.is_active = True

        # Paths for translations and assets
        localedir = os.path.join(PROJECT_ROOT, 'po')
        resources_path = os.path.join(PROJECT_ROOT, 'data', 'resources')
        app_icons_path = os.path.join(PROJECT_ROOT, 'data')

        # Initialize gettext
        gettext.install('setzer', names=('ngettext',), localedir=localedir)

        # Settings and theme
        self.settings = ServiceLocator.get_settings()
        Adw.StyleManager.get_default().set_color_scheme(Adw.ColorScheme.FORCE_LIGHT)

        # Configure ServiceLocator
        ServiceLocator.set_setzer_version('@setzer_version@')
        ServiceLocator.set_resources_path(resources_path)
        ServiceLocator.set_app_icons_path(app_icons_path)

        # Initialize main window, model, and dialogs
        self.main_window = view.MainWindow(self)

        # Set up icon theme
        icon_theme = Gtk.IconTheme.get_for_display(self.main_window.get_display())
        icon_theme.add_search_path(os.path.join(resources_path, 'icons'))
        icon_theme.add_search_path(app_icons_path)
        for folder in ['arrows', 'greek_letters', 'misc_math', 'misc_text', 'operators', 'relations']:
            icon_theme.add_search_path(os.path.join(resources_path, 'symbols', folder))

        # Initialize managers
        ServiceLocator.set_main_window(self.main_window)
        ColorManager.init(self.main_window)
        FontManager.init(self.main_window)

        # Create workspace and initialize components
        self.workspace = Workspace()
        PopoverManager.init(self.main_window, self.workspace)
        LaTeXDB.init(resources_path)
        self.main_window.create_widgets()
        ServiceLocator.set_workspace(self.workspace)
        DialogLocator.init_dialogs(self.main_window, self.workspace)

        # Restore window state and show
        if self.settings.get_value('window_state', 'is_maximized'):
            self.main_window.maximize()
        else:
            self.main_window.unmaximize()
        width = self.settings.get_value('window_state', 'width')
        height = self.settings.get_value('window_state', 'height')
        self.main_window.set_default_size(width, height)

        # Connect signals
        self.main_window.connect('close-request', self.on_window_close)

        # Initialize controllers
        self.workspace.init_workspace_controller()
        self.shortcuts = shortcuts.Shortcuts()

        # Present the window using idle to ensure it happens on the main loop
        GLib.idle_add(self.present_window)

    def present_window(self):
        self.main_window.present()
        return False  # Don't call again

    def on_window_close(self, window, parameter=None):
        self.save_quit()
        return True

    def on_quit_action(self, action, parameter=None):
        self.save_quit()

    def save_quit(self):
        # Add your save and quit logic here
        self.quit()

if __name__ == '__main__':
    main_controller = MainApplicationController()
    exit_status = main_controller.run(sys.argv)
    sys.exit(exit_status)
